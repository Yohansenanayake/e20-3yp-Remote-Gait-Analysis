pipeline {
    agent { label 'DevServer' }

    tools {
        maven 'Maven 3.9.7'
    }

    environment {
        BACKEND_DIR = 'gait-analysis-backend'
        JAR_NAME = 'gait-backend.jar'
        BACKEND_HOST = '13.51.74.35'
        CONTAINER_NAME = 'gait-backend'
        IMAGE_NAME = 'yohansenanayake/rehabgait-backend:latest'
        DEPLOY_DIR = '/home/ubuntu/backend'
        FRONTEND_DIR = 'gait-analysis-frontend'
        S3_BUCKET = 'www.rehabgait.com'
        AWS_REGION = 'eu-north-1'
        PROCESSING_DIR = 'gait-processing-service'
        PROCESSING_IMAGE = 'yohansenanayake/rehabgait-processing:latest'
        PROCESSING_HOST = '13.48.156.250' 
        PROCESSING_CONTAINER = 'gait-processing'
        PROCESSING_DEPLOY_DIR = '/home/ubuntu/processing'

    }

    stages {
            stage('Checkout Code') {
                steps {
                    checkout scm
                }
            }

            stage('Backend Test') {
                steps {
                    dir("${env.BACKEND_DIR}") {
                        withCredentials([
                            file(credentialsId: 'env-test-file', variable: 'ENV_TEST_FILE')
                        ]) {
                            sh '''#!/bin/bash
                            echo "📦 Loading test environment variables"
                            set -a
                            . "$ENV_TEST_FILE"
                            set +a
                            mvn test
                            '''
                        }
                    }
                }
            }

            stage('Build Backend') {
                steps {
                    dir("${env.BACKEND_DIR}") {
                        sh 'mvn clean package -DskipTests'
                    }
                }
            }

            stage('Archive JAR') {
                steps {
                    dir("${env.BACKEND_DIR}") {
                        archiveArtifacts artifacts: "target/${env.JAR_NAME}", fingerprint: true
                    }
                }
            }

            stage('Docker Build & Push') {
                steps {
                    dir("${env.BACKEND_DIR}") {
                        script {
                            sh "docker build -t ${env.IMAGE_NAME} ."

                            withCredentials([usernamePassword(
                                credentialsId: 'dockerhub-credentials',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )]) {
                                sh """
                                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                    docker push ${env.IMAGE_NAME}
                                    docker logout
                                """
                            }
                        }
                    }
                }
            }

            stage('Deploy to Backend Server') {
                steps {
                    sshagent(['rehabgait-backend-deploy-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${env.BACKEND_HOST} << EOF
                            set -e
                            cd ${env.DEPLOY_DIR}
                            docker pull ${env.IMAGE_NAME}
                            docker stop ${env.CONTAINER_NAME} || true
                            docker rm ${env.CONTAINER_NAME} || true
                            docker run -d --name ${env.CONTAINER_NAME} \
                                --env-file .env.prod \
                                -p 8080:8080 \
                                ${env.IMAGE_NAME}
                        """
                    }
                }
            }
             // 🔍 ADD DEBUG STAGE HERE
            // stage('Debug Frontend Structure') {
            //     steps {
            //         dir("${env.FRONTEND_DIR}") {
            //             sh '''
            //                 echo "📁 Checking frontend directory structure..."
            //                 find . -name "*.js" -o -name "*.jsx" | grep -E "(websocket|service)" || echo "No websocket-related files found"
            //                 echo "📂 Contents of src directory:"
            //                 ls -la src/ || echo "src directory not found"
            //                 echo "📂 Contents of src/services directory:"
            //                 ls -la src/services/ || echo "src/services directory not found"
            //                 echo "🔍 Looking for websocketService.js specifically:"
            //                 find . -name "websocketService.js" -type f
            //             '''
            //         }
            //     }
            // }


            stage('Build Frontend') {
                steps {
                    dir("${env.FRONTEND_DIR}") {
                        withCredentials([file(credentialsId: 'env-prod-frontend', variable: 'FRONTEND_ENV')]) {
                            sh '''#!/bin/bash
                                echo "🌐 Setting up frontend environment"
                                cp $FRONTEND_ENV .env.production
                                export NVM_DIR="$HOME/.nvm"
                                [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
                                nvm use 20
                                npm ci
                                npm run build
                            '''
                        }
                    }
                }
            }

            stage('Upload to S3') {
                steps {
                    dir("${env.FRONTEND_DIR}") {
                        sh '''
                            echo "📤 Syncing frontend build to S3 bucket: ${S3_BUCKET}"
                            aws s3 sync dist/ s3://${S3_BUCKET}/ --delete --region ${AWS_REGION}
                        '''
                    }
                }
            }

            stage('Invalidate CloudFront Cache') {
                steps {
                    sh '''
                        echo "🚀 Invalidating CloudFront cache"
                        aws cloudfront create-invalidation --distribution-id E2R68S9IUACL7H --paths "/*"
                        aws cloudfront create-invalidation --distribution-id ERP7VK01EA1CA --paths "/*"
                    '''
                }
            }

            stage('Build & Push Gait Processing Image') {
                steps {
                    dir("${env.PROCESSING_DIR}") {
                        script {
                            sh "docker build -t ${env.PROCESSING_IMAGE} ."

                            withCredentials([usernamePassword(
                                credentialsId: 'dockerhub-credentials',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )]) {
                                sh """
                                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                    docker push ${env.PROCESSING_IMAGE}
                                    docker logout
                                """
                            }
                        }
                    }
                }
            }

            stage('Deploy Gait Processing Service') {
                steps {
                    sshagent(['rehabgait-backend-deploy-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${env.PROCESSING_HOST} << EOF
                            set -e
                            cd ${env.PROCESSING_DEPLOY_DIR}
                            docker pull ${env.PROCESSING_IMAGE}
                            docker stop ${env.PROCESSING_CONTAINER} || true
                            docker rm ${env.PROCESSING_CONTAINER} || true
                            docker run -d --name ${env.PROCESSING_CONTAINER} \
                                --env-file .env.prod \
                                ${env.PROCESSING_IMAGE}
                        """
                    }
                }
            }




    }

    post {
        always {
            cleanWs()
        }

        // success {
        //     echo "✅ Build, test, image push, and deployment successful!"
        //     emailext (
        //                     to: 'yohansenanayake4321@gmail.com',
        //                     subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        //                     body: """<p>Good news! The job <b>${env.JOB_NAME}</b> build <b>${env.BUILD_NUMBER}</b> succeeded.</p>""",
        //                     replyTo: 'noreply@rehabgait.com',
        //                     from: 'alert@rehabgait.com'
        //               )
        // }

        success {
            echo "✅ Build, test, image push, and deployment successful!"
            script {
                // Calculate build duration
                def duration = currentBuild.durationString.replace(' and counting', '')
                
                // Get Sri Lanka time
                def timestamp = sh(
                    script: "TZ='Asia/Colombo' date '+%Y-%m-%d %I:%M:%S %p SLST'",
                    returnStdout: true
                ).trim()

                // Send success email via SES
                sh """
                    aws ses send-templated-email \
                        --source "RehabGait CI-CD <alert@rehabgait.com>" \
                        --destination "ToAddresses=yohansenanayake4321@gmail.com,e20037@eng.pdn.ac.lk,e20342@eng.pdn.ac.lk,e20365@eng.pdn.ac.lk" \
                        --template "RehabGaitDeploymentSuccess" \
                        --template-data '{
                            "job_name": "${env.JOB_NAME}",
                            "build_number": "${env.BUILD_NUMBER}",
                            "duration": "${duration}",
                            "timestamp": "${timestamp}",
                            "jenkins_url": "${env.BUILD_URL}",
                            "app_url": "https://www.rehabgait.com"
                        }' \
                        --region us-east-1
                """
                
                echo "📧 Success notification sent via SES template"
            }
        }


        // failure {
        //     echo "❌ Pipeline failed. Check logs and stages for more information."
        //     emailext (
        //                     to: 'yohansenanayake4321@gmail.com',
        //                     subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        //                     body: """<p>Unfortunately, the job <b>${env.JOB_NAME}</b> build <b>${env.BUILD_NUMBER}</b> failed.</p>""",
        //                     replyTo: 'noreply@rehabgait.com',
        //                     from: 'alert@rehabgait.com'
        //               )
        // }

        failure {
            echo "❌ Pipeline failed. Check logs and stages for more information."
            script {
                // Get the failed stage name
                def failedStage = "Unknown"
                try {
                    def stages = currentBuild.rawBuild.getAllActions(org.jenkinsci.plugins.workflow.actions.LabelAction.class)
                    if (stages) {
                        failedStage = stages.last().getDisplayName()
                    }
                } catch (Exception e) {
                    failedStage = "Build Process"
                }

                // Get Sri Lanka time
                def timestamp = sh(
                    script: "TZ='Asia/Colombo' date '+%Y-%m-%d %I:%M:%S %p SLST'",
                    returnStdout: true
                ).trim()

                // Send failure email via SES
                sh """
                    aws ses send-templated-email \
                        --source "RehabGait CI-CD <alert@rehabgait.com>" \
                        --destination "ToAddresses=yohansenanayake4321@gmail.com,e20037@eng.pdn.ac.lk,e20342@eng.pdn.ac.lk,e20365@eng.pdn.ac.lk" \
                        --template "RehabGaitDeploymentFaliure" \
                        --template-data '{
                            "job_name": "${env.JOB_NAME}",
                            "build_number": "${env.BUILD_NUMBER}",
                            "failed_stage": "${failedStage}",
                            "timestamp": "${timestamp}",
                            "error_message": "Build failed during ${failedStage} stage. Check console output for details.",
                            "jenkins_url": "${env.BUILD_URL}",
                            "console_url": "${env.BUILD_URL}console"
                        }' \
                        --region us-east-1
                """
                
                echo "📧 Failure notification sent via SES template"
            }
        }
    }
}
